# This code snippet is part of the Logstash pipeline that is used to index the posts from the database into the Elasticsearch index.
# The pipeline is scheduled to run every 10 seconds, and will run the SQL query against the database to get the latest posts.
# The posts are then indexed into the Elasticsearch index, and the tracking column is updated to the latest ID.
input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        jdbc_driver_library => "/opt/logstash/vendor/jdbc/postgresql-42.2.18.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement_filepath => "/usr/share/logstash/config/queries/sync-projects.sql"
        use_column_value => true
        tracking_column => "id"
        tracking_column_type => "numeric"
        clean_run => true
        schedule => "*/10 * * * * *" # Run every 10 seconds
    }
}

filter {
    mutate {
    # remove unneeded fields including ones that were added by logstash
        remove_field => ["@version", "@timestamp"]
    }
}

# This filter is used to transform the data in the message field into a new JSON format.
# The message field contains a JSON string that is parsed by the filter.
# The parsed JSON string is then indexed into elasticsearch.
# The operation field of the message field is used to determine the action to be taken.
# If the operation is delete, then the document with the id given by the project_id field is deleted.
# If the operation is insert or update, then the document with the id given by the project_id field is indexed.
# The index is projects and the document is the original message field.

output {
    stdout { codec => rubydebug { metadata => true } }
    if [operation] == "delete" {
        elasticsearch {
            hosts => ["http://elasticsearch:9200"] # URL of the ES docker container - docker would resolve it for us.
            action => "delete"
            index => "projects"
            document_id => "%{project_id}"
        }
    } else if [operation] in ["insert", "update"] {
        elasticsearch {
            hosts => ["http://elasticsearch:9200"] # URL of the ES docker container - docker would resolve it for us.
            action => "index"
            index => "projects"
            document_id => "%{project_id}"
        }
    }
}
